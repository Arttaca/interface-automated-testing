# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Multi flows part 1

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Multi-flow test case 1
      run: |
        pytest MULTI_FLOWS/tc0101.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 2
      run: |
        pytest MULTI_FLOWS/tc0102.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 3
      run: |
        pytest MULTI_FLOWS/test_01_03.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 4
      run: |
        pytest MULTI_FLOWS/tc0104.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 5
      run: |
        pytest MULTI_FLOWS/tc0105.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 6
      run: |
        pytest MULTI_FLOWS/tc0106.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 7
      run: |
        pytest MULTI_FLOWS/tc0107.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 8
      run: |
        pytest MULTI_FLOWS/tc0108.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 9
      run: |
        pytest MULTI_FLOWS/tc0109.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 10
      run: |
        pytest MULTI_FLOWS/tc0110.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 11
      run: |
        pytest MULTI_FLOWS/tc0111.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 12
      run: |
        pytest MULTI_FLOWS/tc0112.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 13
      run: |
        pytest MULTI_FLOWS/tc0113.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml
    - name: Multi-flow test case 14
      run: |
        pytest MULTI_FLOWS/tc0114.py --browser=chrome --headless -v -s --junit-xml=junit/test-results.xml